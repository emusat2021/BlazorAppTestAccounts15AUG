@page "/websites/delete"

@using Microsoft.EntityFrameworkCore
@using BlazorAppTestAccounts15AUG.Models
@inject IDbContextFactory<BlazorAppTestAccounts15AUG.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>WebSite</h4>
    <hr />
    @if (website is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@website.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Create</dt>
            <dd class="col-sm-10">@website.Create</dd>
        </dl>
        <EditForm method="post" Model="website" OnValidSubmit="DeleteWebSite" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(website is null)">Delete</button> |
            <a href="/websites">Back to List</a>
        </EditForm>
    }
</div>

@code {
    WebSite? website;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        website = await context.WebSite.FirstOrDefaultAsync(m => m.Id == Id);

        if (website is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteWebSite()
    {
        using var context = DbFactory.CreateDbContext();
        context.WebSite.Remove(website!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/websites");
    }
}
